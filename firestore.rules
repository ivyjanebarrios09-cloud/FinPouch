/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - All data is nested under the `/users/{userId}` path.
 * - Devices are stored under `/users/{userId}/devices/{deviceId}`.
 * - Wallet activity is stored under `/users/{userId}/devices/{deviceId}/walletActivity/{activityId}`.
 * - Spending records are stored under `/users/{userId}/spendingRecords/{recordId}`.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own devices and wallet activities.
 * - Users can only create, read, update, and delete their own spending records.
 * - Listing of users is not allowed.
 *
 * Denormalization for Authorization:
 * - Spending records contain a `userId` field to allow for easy ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner of the existing document, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their own user document.
     * @deny (create) User with uid 'user123' cannot create a user document for 'user456'.
     * @principle Enforces self-creation; only the user themselves can create their document.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/devices/{deviceId} collection.
     * @path /users/{userId}/devices/{deviceId}
     * @allow (create) User with uid 'user123' can create a device document under their user ID.
     * @deny (create) User with uid 'user123' cannot create a device document under user ID 'user456'.
     * @principle Enforces document ownership for writes; only the owner can modify.
     */
    match /users/{userId}/devices/{deviceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/devices/{deviceId}/walletActivity/{activityId} collection.
     * @path /users/{userId}/devices/{deviceId}/walletActivity/{activityId}
     * @allow (create) User with uid 'user123' can create a wallet activity document under their device.
     * @deny (create) User with uid 'user123' cannot create a wallet activity document under device 'device456'.
     * @principle Enforces document ownership for writes; only the owner can modify.
     */
    match /users/{userId}/devices/{deviceId}/walletActivity/{activityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for the /users/{userId}/spendingRecords/{recordId} collection.
      * @path /users/{userId}/spendingRecords/{recordId}
      * @allow (create) User with uid 'user123' can create a spending record under their user ID.
      * @deny (create) User with uid 'user123' cannot create a spending record under user ID 'user456'.
      * @principle Enforces document ownership for writes; only the owner can modify.
      */
    match /users/{userId}/spendingRecords/{recordId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}