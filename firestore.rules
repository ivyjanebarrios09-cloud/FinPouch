/**
 * @file Firebase Security Rules for the application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user can only access their own data.
 * All read and write operations are validated against the authenticated user's ID.
 *
 * @data_structure Data is nested under `/users/{userId}`. Each user has a collection of `/devices/{deviceId}`,
 * and each device has a subcollection of `/walletActivity/{activityId}`.
 *
 * @key_security_decisions
 *  - Users cannot list all users.
 *  - Users can only create, update, or delete their own devices and wallet activity.
 *
 * @denormalization_for_authorization To simplify rules and avoid costly `get()` calls, the `userId` is
 * present in both the device and wallet activity documents.
 *
 * @structural_segregation All user-specific data is stored under the `/users/{userId}` path, ensuring
 * clear separation and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users collection.  Listing all users is disallowed.
     * @path /users/{userId}
     */
    match /users/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/devices/{deviceId} collection.
     * @path /users/{userId}/devices/{deviceId}
     * @allow (create) User 'user123' can create a device with deviceId 'device456' if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create a device with deviceId 'device456' under /users/user123/devices/.
     * @principle Enforces document ownership for writes, validates relational integrity on create.
     */
    match /users/{userId}/devices/{deviceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.deviceId == deviceId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/devices/{deviceId}/walletActivity/{activityId} collection.
     * @path /users/{userId}/devices/{deviceId}/walletActivity/{activityId}
     * @allow (create) User 'user123' can create wallet activity for device 'device456' if authenticated as 'user123'.
     * @deny (create) User 'user456' cannot create wallet activity under /users/user123/devices/device456/.
     * @principle Enforces document ownership for writes, validates relational integrity on create.
     */
    match /users/{userId}/devices/{deviceId}/walletActivity/{activityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}